# Generated by Django 2.2.1 on 2019-08-04 04:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('allergyid', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('allergyname', models.CharField(blank=True, max_length=255, null=True)),
                ('allergyoffset', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'allergy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('diagnosisid', models.AutoField(primary_key=True, serialize=False)),
                ('icd9code', models.CharField(blank=True, max_length=100, null=True)),
                ('diagnosisoffset', models.IntegerField(blank=True, db_column='diagnosisOffset', null=True)),
            ],
            options={
                'db_table': 'diagnosis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('labid', models.AutoField(primary_key=True, serialize=False)),
                ('labresultoffset', models.IntegerField(blank=True, null=True)),
                ('labtypeid', models.TextField(blank=True, null=True)),
                ('labname', models.CharField(blank=True, max_length=255, null=True)),
                ('labresult', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('labmeasurenamesystem', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'lab',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('medicationid', models.AutoField(primary_key=True, serialize=False)),
                ('drugname', models.CharField(blank=True, max_length=255, null=True)),
                ('dosage', models.CharField(blank=True, max_length=400, null=True)),
                ('routeadmin', models.CharField(blank=True, max_length=100, null=True)),
                ('drugoffset', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'medication',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Microlab',
            fields=[
                ('microlabid', models.AutoField(primary_key=True, serialize=False)),
                ('culturesite', models.CharField(blank=True, max_length=255, null=True)),
                ('organism', models.CharField(blank=True, max_length=255, null=True)),
                ('antibiotic', models.CharField(blank=True, max_length=255, null=True)),
                ('sensitivitylevel', models.CharField(blank=True, max_length=255, null=True)),
                ('culturetakenoffset', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'microlab',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Patients',
            fields=[
                ('uniquepid', models.CharField(blank=True, max_length=10, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'patients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stay',
            fields=[
                ('patientunitstayid', models.AutoField(primary_key=True, serialize=False)),
                ('gender', models.CharField(blank=True, max_length=25, null=True)),
                ('age', models.CharField(blank=True, max_length=10, null=True)),
                ('ethnicity', models.CharField(blank=True, max_length=50, null=True)),
                ('admissionheight', models.TextField(blank=True, null=True)),
                ('unittype', models.CharField(blank=True, max_length=50, null=True)),
                ('admissionweight', models.TextField(blank=True, null=True)),
                ('unitdischargeoffset', models.IntegerField(blank=True, null=True)),
                ('unitdischargestatus', models.CharField(blank=True, max_length=10, null=True)),
                ('uniquepid', models.CharField(blank=True, max_length=10)),
            ],
            options={
                'db_table': 'stay',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': (('view_graph', 'Offer user the authority to view the analysis'), ('add_patient', 'Add new patient record'), ('can_delete_user', 'Delete patient record')),
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
